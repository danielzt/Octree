//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
public class OctreeData
{
	public delegate bool SplitPolicy(Vector3 coord,float length,OctreeLeaf trace,int threadNum=1);
	public SplitPolicy splitPolicy;
    public delegate bool LeafFunction(OctreeLeaf leaf, Vector3 pos, float len, int threadNum);
    public LeafFunction leafFunction;
	public delegate float ValueFunction(Vector3 coord);
	public ValueFunction valueFunction;
	public delegate Vector3 GradientFunction(Vector3 coord);
	public GradientFunction gradientFunction;

	public OctreeData ()
	{
		
	}
	
	public float[] CalculateValues(Vector3[] positions)
	{
		List<float> results = new List<float>(positions.Length);
		for (int i = 0; i < positions.Length; i++) {
			results.Add(valueFunction(positions[i]));
		}
		return results.ToArray();
	}

	public void CalculateValues(Vector3[] positions, ref float[] results)
	{
		if(!(results.Length >= positions.Length)){
			throw new IndexOutOfRangeException("Number of elements in results array is not enough to accomodate positions");
		}
		for (int i = 0; i < positions.Length; i++) {
			results[i]=valueFunction(positions[i]);
		}
		return;
	}

	public float CalculateValue(Vector3 position){
		return valueFunction(position);
	}

    public Vector3 CalculateGrad(Vector3 position)
    {
        return gradientFunction(position);
    }
}